    <!-- メインコンテンツエリア - 新規タスク投稿 -->
    <main class="w-full max-w-4xl bg-white shadow-lg rounded-xl p-8 mb-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-2 border-b-2 border-blue-400 pb-2">新規タスク投稿</h2>
        <!-- 投稿カウンター。実際のRailsアプリではコントローラーから渡されたタスク数を表示します -->
        <div id="newPostCounter" class="text-right text-gray-600 text-sm mb-6">
            本日投稿されたタスク数: <span id="postedTaskCount"><%# new_tasks_count %></span> 件
        </div>

        <div class="space-y-6">
            <!-- 実際のRailsアプリでは form_with や form_tag を使ってフォームを生成します -->
            <%#= form_with(model: @task, local: true) do |form| %>
            <!-- アクションボタン群 (上部に移動) -->
            <div class="flex flex-col sm:flex-row justify-end space-y-4 sm:space-y-0 sm:space-x-4 pb-4">
                <!-- 「あとで書く」ボタンは、JavaScriptで処理するか、別途アクションを定義します -->
                <button id="writeLaterBtn" class="bg-gray-400 hover:bg-gray-500 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out text-lg">
                    あとで書く
                </button>
                <!-- 投稿ボタンは、form_withのsubmitボタンとして機能します -->
                <button id="postTaskBtn" type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out text-lg">
                    タスクを投稿
                </button>
            </div>

            <!-- タスク名入力欄 -->
            <div>
                <label for="taskName" class="block text-lg font-medium text-gray-700 mb-2">タスク名 <span class="text-red-500">*</span></label>
                <!-- 実際のRailsアプリでは form.text_field を使用します -->
                <input type="text" id="taskName" name="task[name]" placeholder="例: 〇〇プロジェクトの資料作成"
                       class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-lg">
            </div>

            <!-- カテゴリ選択 -->
            <div>
                <label for="taskCategory" class="block text-lg font-medium text-gray-700 mb-2">カテゴリ</label>
                <!-- 実際のRailsアプリでは form.select を使用します -->
                <select id="taskCategory" name="task[category]"
                        class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-lg">
                    <option value="">選択してください</option>
                    <option value="work">仕事</option>
                    <option value="private">プライベート</option>
                    <option value="study">学習</option>
                    <option value="other">その他</option>
                </select>
            </div>

            <!-- 締切日入力 -->
            <div>
                <label for="taskDeadline" class="block text-lg font-medium text-gray-700 mb-2">締切日</label>
                <!-- 実際のRailsアプリでは form.date_field を使用します -->
                <input type="date" id="taskDeadline" name="task[deadline]"
                       class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-lg">
            </div>

            <!-- 重要度選択 -->
            <div>
                <label for="taskImportance" class="block text-lg font-medium text-gray-700 mb-2">重要度</label>
                <!-- 実際のRailsアプリでは form.select を使用します -->
                <select id="taskImportance" name="task[importance]"
                        class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-lg">
                    <option value="low">低</option>
                    <option value="medium" selected>中</option>
                    <option value="high">高</option>
                </select>
            </div>

            <!-- タスクの詳細を書く欄 -->
            <div>
                <label for="memo" class="block text-lg font-medium text-gray-700 mb-2">タスクの詳細</label>
                <!-- 実際のRailsアプリでは form.text_area を使用します -->
                <textarea id="memo" name="task[memo]" rows="4" placeholder="タスクの詳細や補足事項を記入してください。"
                          class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-lg"></textarea>
            </div>
            <%# end %>

        </div>
    </main>

    <!-- タスク一覧への導線 -->
    <section class="w-full max-w-4xl bg-white shadow-lg rounded-xl p-8 text-center">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6 border-b-2 border-blue-400 pb-2">タスクの確認</h2>
        <p class="text-gray-700 text-lg mb-6">現在のタスク一覧を確認したり、編集・削除したい場合はこちらから。</p>
        <!-- 実際のRailsアプリでは link_to を使用します -->
        <%#= link_to 'タスク一覧を表示', tasks_path, class: '...' %>
        <a href="#" id="viewTasksBtn" class="inline-block bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-lg shadow-lg transition duration-300 ease-in-out text-xl">
            タスク一覧を表示
        </a>
    </section>

    <script>
        // JavaScriptは最小限に留め、ボタンクリック時の動作をシミュレートします。
        // 実際のアプリでは、ここでフォームデータの送信やページ遷移のロジックを記述します。
        
        // 注意: Railsでは、JavaScriptは通常別のファイルに分離されます。
        
        document.addEventListener('DOMContentLoaded', () => {
            const taskNameInput = document.getElementById('taskName');
            const writeLaterBtn = document.getElementById('writeLaterBtn');
            const postTaskBtn = document.getElementById('postTaskBtn');
            const viewTasksBtn = document.getElementById('viewTasksBtn');
            const postedTaskCountSpan = document.getElementById('postedTaskCount'); // カウンター表示要素

            // ERBで生成されたタスク数があれば、それを初期値として設定
            let newTasksCount = parseInt(postedTaskCountSpan.textContent) || 0;

            // カウンターを更新する関数
            function updateCounter() {
                postedTaskCountSpan.textContent = newTasksCount;
            }

            // 「あとで書く」ボタンのクリックイベント
            writeLaterBtn.addEventListener('click', () => {
                const taskName = taskNameInput.value.trim();
                if (taskName === "") {
                    console.log("タスク名が未記入ですが、「あとで書く」として保存します。");
                    alert("タスク名が未記入ですが、「あとで書く」として保存しました！（実際には保存処理が行われます）");
                } else {
                    console.log(`「${taskName}」を「あとで書く」として保存します。`);
                    alert(`「${taskName}」を「あとで書く」として保存しました！（実際には保存処理が行われます）`);
                }
                // 「あとで書く」の場合も投稿数に含める
                newTasksCount++;
                updateCounter();

                // フォームをリセットするなどの処理
                // taskNameInput.value = '';
                // document.getElementById('taskCategory').value = '';
                // document.getElementById('taskDeadline').value = '';
                // document.getElementById('taskImportance').value = 'medium';
                // document.getElementById('memo').value = '';
            });

            // 「タスクを投稿」ボタンのクリックイベント
            postTaskBtn.addEventListener('click', () => {
                const taskName = taskNameInput.value.trim();
                if (taskName === "") {
                    alert("タスク名を入力してください。");
                    taskNameInput.focus();
                    return;
                }
                console.log(`タスク「${taskName}」を投稿します。`);
                alert(`タスク「${taskName}」を投稿しました！（実際にはデータベースに保存されます）`);

                newTasksCount++; // 投稿成功時にカウントを増やす
                updateCounter(); // カウンターを更新

                // フォームをリセットするなどの処理
                // taskNameInput.value = '';
                // document.getElementById('taskCategory').value = '';
                // document.getElementById('taskDeadline').value = '';
                // document.getElementById('taskImportance').value = 'medium';
                // document.getElementById('memo').value = '';
            });

            // 「タスク一覧を表示」ボタンのクリックイベント
            viewTasksBtn.addEventListener('click', (e) => {
                e.preventDefault(); // リンクのデフォルト動作をキャンセル
                console.log("タスク一覧ページへ遷移します。");
                alert("タスク一覧ページへ遷移します！（実際にはタスク一覧ページへ移動します）");
                // 実際のアプリでは、window.location.href = 'task_list.html'; などでページ遷移
            });

            // 初期表示時にカウンターを更新
            updateCounter();
        });
    </script>